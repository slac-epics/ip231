#
#
InTerminator  = CR LF;
OutTerminator = CR LF;
ReplyTimeout  =  800;
ReadTimeout   =  100;
WriteTimeout  =  100;
ExtraInput    = Ignore;

# Controller
SET_MEM_STORE       { out "CH MEM STORE %{1|2|3|4}";                                          	wait 20; }
SET_MEM_RECALL      { out "CH MEM RECALL %{1|2|3|4}";                                         	wait 20; }
GET_IDN             { out "*IDN?";              in "Molectron Detector, Inc. %39c";           	wait 20; }
GET_LINEF           { out "SYST OPT LINE ?";    in "SYSTEM\: OPTION\: LINE %i%(EGU)s";        	wait 20; }
SET_RESET           { out "*RST";                                                             	wait 20; }
SET_SELFTEST        { out "*TST ?";             in "PASS";                                    	wait 20; }
SET_CONFIGURE       { out "SYST OPT LINE 60HZ\r\n";                                           	wait 20; 
		      out "OUT BUF CIRC";						     	wait 20; 
		      out "OUT CONT OFF";							wait 20;
		      out "OUT DEPTH 1024";							wait 20;
		      out "OUT FORM ASCII\x2b";							wait 400;
		      out "CH ALL STAT SEND AVG DEV MIN MAX HEAD";				wait 20;
		      out "CH ALL STAT MODE AUTO";						wait 400; }
SET_SPEEDUP         { out "SYST OPT SPEED %{OFF|ON|SEL}";                                     	wait 20; }
GET_SPEEDUP         { out "SYST OPT SPEED ?";   in "SYSTEM\: OPTION\: SPEEDUP %{OFF|ON|SEL}"; 	wait 20; }
SET_DATAMODE        { out "OUT FORM %{BIN|ASCII\x2b|ASCII}";                                   	wait 400; }
GET_DATAMODE        { out "OUT FORM ?";   	in "OUTPUT: FORMAT %{BINARY|ASCII\x2b|ASCII}"; 	wait 20; }
GET_DATABUFFCONT    { out "OUT BUFFER CONTENTS"; in "OUTPUT: BUFFER CONTENTS %i BYTES";		wait 20; }
GET_DATABUFFDPTH    { out "OUT DEP?"; 		in "OUTPUT: DEPTH %i";				wait 20; }
SET_DATABUFFDPTH    { out "OUT DEP %i"; 							wait 20; }
GET_DATABUFFRAW     { out "OUT DUMP"; 								wait 1000; }
GET_DATA_NOR        { 				in "\$1:PUL=%(\$2:\$3.VAL)E%(\$2:\$3.EGU)s"; }
GET_DATA_NOR_TH     { 				in "\$1:THR=%(\$2:\$3.VAL)E%(\$2:\$3.EGU)s"; }
GET_DATA_STAT       { 				in "\$1:AVG=%(\$2:\$3.VAL)E%(\$2:\$3.EGU)1c,MIN=%(\$2:\$5.VAL)E%(\$2:\$5.EGU)1c,MAX=%(\$2:\$6.VAL)E%(\$2:\$6.EGU)1c,DEV=%(\$2:\$4.VAL)E%(\$2:\$4.EGU)1c"; }
GET_DATA_STA_TH     { 				in ",AVG=%(\$2:\$3.VAL)E%(\$2:\$3.EGU)1c,DEV=%(\$2:\$4.VAL)E%(\$2:\$4.EGU)1c"; }
GET_DATA_AVG        { 				in "\$1:%(\$2:\$3.VAL)E%(\$2:\$3.EGU)s"; }
GET_EXTRATEXT       { 				in "%39c"; }


# Channel A or Channel B
GET_UNITS           { out "CH \$1 UNITS ?";     in "CHAN \$1\: UNITS %{VOL|JOU|WAT|HZ|RAT|?}";	wait 20; }
SET_UNITS           { out "CH \$1 UNITS %{VOL|JOU|WAT|HZ|RAT}";                               	wait 20; }
GET_MODE            { out "CH \$1 OPER ?";      in "CHAN \$1\: OPER %{ERR|NOR|STA|AVE}";      	wait 20; }
SET_MODE            { out "CH \$1 OPER %{NORM|AVER|STAT}";                                    	wait 20; }
GET_STA_BATCH       { out "CH \$1 STAT BAT ?";  in "CHAN \$1\: STAT\: BATCH_SIZE %i";         	wait 20; }
SET_STA_BATCH       { out "CH \$1 STAT BAT %i";                                               	wait 20; }
GET_STA_MODE        { out "CH \$1 STAT MODE ?"; in "CHAN \$1\: STAT\: MODE %{AUTO|MANUAL}";   	wait 20; }
SET_STA_MODE        { out "CH \$1 STAT MODE %{AUTO|MAN}";                                     	wait 20; }
GET_AVG_BATCH       { out "CH \$1 AVER BAT ?";  in "CHAN \$1\: AVERAGE\: BATCH_SIZE %i";      	wait 20; }
SET_AVG_BATCH       { out "CH \$1 AVER BAT %i";                                               	wait 20; }
GET_RANGE_MIN       { out "CH \$1 RANGE MIN ?"; in "CHAN \$1\: RANGE MIN=%f%(EGU)s";          	wait 20; }
GET_RANGE_MAX       { out "CH \$1 RANGE MAX ?"; in "CHAN \$1\: RANGE MAX=%f%(EGU)s";          	wait 20; }
GET_RANGE           { out "CH \$1 RANGE ?";     in "CHAN \$1\: RANGE %f%(EGU)s"; @mismatch {in "CHAN \$1\: RANGE %(EGU)s";}    wait 20; }
SET_RANGE           { out "CH \$1 RANGE %i%(\$2.VAL)s";                                       	wait 20; }
GET_TRIG_RISETIME   { out "CH \$1 TRIG RISE ?"; in "CHAN \$1\: TRIG\: RISETIME %i";           	wait 20; }
SET_TRIG_RISETIME   { out "CH \$1 TRIG RISE %{2|4|8|16}";                                     	wait 20; }
GET_TRIG_HOLDOFF    { out "CH \$1 TRIG HOLD ?"; in "CHAN \$1\: TRIG\: HOLDOFF %i";            	wait 20; }
SET_TRIG_HOLDOFF    { out "CH \$1 TRIG HOLD %i";                                              	wait 20; }
GET_TRIG_LEVEL      { out "CH \$1 TRIG LEV ?"; in "CHAN \$1\: TRIG\: LEVEL %i";               	wait 20; }
SET_TRIG_LEVEL      { out "CH \$1 TRIG LEV %i";                                               	wait 20; }
GET_TRIG_SRC        { out "CH \$1 TRIG SRC ?"; in "CHAN \$1\: TRIG\: SOURCE %{INT|EXTPOS|EXTNEG|SLAV}";           wait 20; }
SET_TRIG_SRC        { out "CH \$1 TRIG SRC %{INT|EXTPOS|EXTNEG|SLAV}";                        	wait 20; }
#GET_PROB_TYPE       { out "CH \$1 TYPE ?";      in "CHAN \$1\: TYPE %39c";	      	      	wait 20; }
GET_PROB_TYPE       { out "CH \$1 TYPE ?";      in "CHAN \$1\: TYPE %{PYRO|THER}";	      	wait 20; }
GET_RESP_THER       { out "CH \$1 RESP THER ?"; in "CHAN \$1\: RESP\: THERMOPILE %f";	      	wait 20; }
SET_RESP_THER       { out "CH \$1 RESP THER %.3e"; 					      	wait 20; }
GET_RESP_PYRO       { out "CH \$1 RESP PYRO ?"; in "CHAN \$1\: RESP\: PYRO %f";		      	wait 20; }
SET_RESP_PYRO       { out "CH \$1 RESP PYRO %.3e"; 					      	wait 20; }
GET_WLEN_COMP       { out "CH \$1 WAVE ?"; in "CHAN \$1\: WAVELENGTH COMPENSATION\: %f %(EGU)s"; wait 20; }
SET_WLEN_COMP       { out "CH \$1 WAVE %.3e"; 					              	wait 20; }
