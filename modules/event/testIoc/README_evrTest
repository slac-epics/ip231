Instructions for RTEMS evrTest users                    
-------------------------------------

I - Correct and build the xxxxApp application:
----------------------------------------------

(0) Install and build the event, generalTime, and miscUtils 
    modules from the LCLS CVS repository.  

    http://www.slac.stanford.edu/cgi-wrap/cvsweb/epics/site/src/?cvsroot=LCLS

(1) Correct EPICS_BASE, MSI, and the EVENT module in xxxxApp/configure/RELEASE.

(2) Clean/rebuild.	

(3) The following document describes the database records that are unique to 
    the event system,and some of the usage.  The document has not yet been 
    updated for the newest versions of the EVG and EVR (version 200 and above): 

    http://www.slac.stanford.edu/grp/lcls/controls/global/subsystems/timing/globalEventV3.htm	

(4) To do detail testing (ie, using the EVR diagnostics display) or to
    change the databases provided in this application, use the
    the EVR reference manual from Micro-Research Finland Oy as reference:

VME: http://www.slac.stanford.edu/grp/lcls/controls/global/subsystems/timing/uResearch/230/EVR-230TREF-001.pdf
PMC: http://www.slac.stanford.edu/grp/lcls/controls/global/subsystems/timing/uResearch/200-dataXf/PMC-EVR-TREF-003.pdf

(5) To do low-level testing via register reads and write without EPICS, use 
    this writeup by John Dusatko as a guide.  It also has some system 
    configuration information:

    http://www.slac.stanford.edu/grp/lcls/controls/global/subsystems/timing/test_system_register_setup.doc


II - Adding EVR database and configuration to your IOC startup file:
--------------------------------------------------------------------

(1) See xxxxApp/iocBoot/ioc-test-ev01/st.cmd for an example.

(2) Load evrTest.db created in the previous section (before iocInit):

    dbLoadRecords("db/evrTest.db")

(3) Add ErConfigure for each EVR before iocInit.

    VME:      ErConfigure(<instance>,<address>,<vector>,<level>,0)
    PMC:      ErConfigure(<instance>,    0    ,    0   ,   0   ,1)
    Embedded: ErConfigure(<instance>,    0    ,<vector>,<level>,2)

    where instance = EVR instance, starting from 0, incrementing by 1
                     for each subsequent card.  Only 1 EVR instance
		     is allowed for Embedded EVRs.
    and   address  = VME card address, starting from 0x300000, 
                     incrementing by 0x100000 for each subsequent card
                     (0 for PMC and Embedded)
    and   vector   = VME or Embedded interrupt vector.  
		     For VME, start from 0x60 and increment by 0x02 for 
		     each subsequent card.
                     (0 for PMC)
    and   level    = VME or Embedded interrupt level.
		     For VME, set to 4.  Can be the same for all EVRs.
                     (0 for PMC)
    and   0        = VME
       or 1        = PMC
       or 2	   = Embedded


III - Hardware Setup:
---------------------

(1) Installation instructions for the PMC EVR are here:
    http://www.slac.stanford.edu/grp/lcls/controls/global/subsystems/timing/PMC-EVR_install_inst_v1d0.pdf

(2) Connect fiber from a nearby timing fiber fanout module to each EVR.

    If the fiber has just the receive cable, connect the single cable to the
    top spigot of the transceiver (bottom when the black lock is on the
    right).

IV - Special One-Time PMC Setup:
--------------------------------

The PMC EVRs, as delivered, have incorrect device and vendor IDs in their 
EEPROMs.  These IDs must be corrected before the module can be configured 
by the software.  Use the following one-time procedure to burn in the
correct values for each PMC EVR.  

WARNING - WARNING - WARNING:
IF THERE ARE OTHER PMCS CONNECTED TO YOUR CPU, IT'S POSSIBLE THIS
PROCEDURE WILL WRITE TO THE WRONG PMC AND RUIN IT!!  REMOVE 
NON-EVR PMCS BEFORE RUNNING THIS PROCEDURE TO BE SAFE.

(1) Boot the CPU with an IOC application that includes the event package.
    The "ErConfigure" command for each PMC EVR will fail if it hasn't yet 
    been corrected.

(2) Type the following command to read the vendor and device ID for 
    PMC instance 0 or 1:

    Cexp>evrEEPROMFixup(<0 or 1>,0)

    Look for these results:

    PLX 9030 found at 0xe110<0or1>000, EEPROM present
    Subsytem vendor ID 0x10b5, device ID 0x9030

    > Sanity check passed...
    > Informational mode only; EEPROM contents unmodified.
    ==> Call again with nonzero 'doit' argument to apply change.
    0x00000000 

(3) If the results are as expected, type the following command to correct
    the vendor and device ID:

    Cexp> evrEEPROMFixup(<0 or 1>,1)

    Look for these results:

    PLX 9030 found at 0xe110<0or1>000, EEPROM present
    Subsytem vendor ID 0x10b5, device ID 0x9030

    > Sanity check passed...
    > Writing MRF id (0x1a3e) to EEPROM SSVID
    > Writing EVR id (0x10c8) to EEPROM SSDID
    ==> EEPROM successfully fixed
    0x00000000 (0)

(4) Reboot the CPU and check that the ErConfigure commands are successful.


V - EVR Diagnostics Display:
----------------------------

(1) Once the IOC has booted successfully, bring up the EVR diagnostics display:

    cd xxxxApp/eventTestApp/edm
    edm -x -m "LOCA=TEST,UNIT=EV01" evrTestDiags.edl

    Check that the "Module Description" and "FPGA Version" are correct
    and the board is enabled.

(2) Use the "Extended Delay Trigger Output" part of the display to set the
    PMC front panel trigger state, polarity, pulse width, and delay.  The 
    pulse width and delay are in tick units (1 tick = 8.4 nsec).  The clock
    prescaler can remain at 1 since most delays are relatively short.

(3) Use the "Trigger Output" part of the display to set the transition 
    module trigger state, polarity, pulse width, and delay. 

(4) The "Rx Link" box provides the status of the connection with the EVG.  
    Note that the RX failure interrupt is turned off since it
    may produce a runaway IRQ on the CPU which will require a CPU reboot to
    clear.  The IOC polls the link status every 2 seconds instead.

(5) Bring up the EVR trigger diagnostics display by pushing the "Triggers" 
    button on the EVR diagnostics display.  Use this display to enter the
    the event codes used by your IOC and select the channels which will be 
    triggered by each event code.  

(6) Bring up the IOC event diagnostics display by pushing the "Events"
    button on the EVR diagnostics display.  This display will show the 
    count received from the EVG since IOC boot for event codes 1 to 14.  
    The rate is updated about every second.  The count and rate are only 
    updated when the VME IRQ is enabled on the "Triggers" panel for the 
    event code.  Trigger the sequence from the EVG (see README_evgTest) 
    to see the values change.

(7) If the delay between event codes is too short and the sequence
    is continuously triggered (ie, the EVG is in "Normal Recycle" mode),
    the IOC will disable interrupts with the following console error:

       Runaway IRQ #80; disabling

    and will need to be rebooted.  


VI - EVR Diagnostics from the Console:
--------------------------------------

(1) To see information about the configured EVR (specifically, to find the
    card address to use in step (3) below):

    Cexp>dbior()

(2) To access the hardware directly, without using EPICS records, at the
    console prompt:

    Cexp> ER()
    Enter 0 (for the first EVR).
    Then enter a selection:  
    r - Reset everything on the event receiver
    f - Drain the event FIFO
    1 - Dump event RAM 1
    2 - Dump event RAM 2
    y - Dump data buffer
    z - Dump event receiver regs
    a - Enable RAM 1
    b - Enable RAM 2
    d - Disable RAMs
    s - Show RXVIO counter
    v - Clear RXVIO counter
    q - quit

(3) To access registers directly, use writeup by John Dusatko (see section I) 
    as a guide.

    To display register(s):
    Cexp>md.help()

        int md (unsigned address, int count, int word_size)

Dump memory. Dump 'count' bytes starting at 'address' using a word length of
'word_size' bytes ('4', '2' or '1' - defaults to '4').

    To display all registers on a PMC EVR:
    Cexp>md(0xe1102000,512,2)
    To display all registers on a VME EVR configured with 0x300000:
    Cexp>md(0x9f300000,512)

    To write to a register:
    Cexp>mm.help()

        int mm (unsigned address, int word_size)

Inspect and modify memory. Type '.' to exit, '^' / 'v' to change directions.
'word_size' can be '4', '2', or '1' bytes - defaults to '4'

    To write to the first register of a PMC EVR:
    Cexp>mm(0xe1102000,2)

