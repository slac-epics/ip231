Read values on office PC (Linux, Perl) via gateway from bogart
4 channels,    40 values total in  0 wallclock secs ( 0.17 usr +  0.00 sys =  0.17 CPU)
4 channels,   400 values total in  0 wallclock secs ( 0.68 usr +  0.05 sys =  0.73 CPU)
4 channels,   800 values total in  1 wallclock secs ( 1.16 usr +  0.03 sys =  1.19 CPU)
4 channels,  1600 values total in  2 wallclock secs ( 2.15 usr +  0.07 sys =  2.22 CPU)
4 channels,  2000 values total in  4 wallclock secs ( 2.70 usr +  0.05 sys =  2.75 CPU)
4 channels,  4000 values total in  6 wallclock secs ( 5.39 usr +  0.07 sys =  5.46 CPU)
4 channels,  8000 values total in 12 wallclock secs (10.57 usr +  0.16 sys = 10.73 CPU)
4 channels, 10000 values total in 15 wallclock secs (13.26 usr +  0.25 sys = 13.51 CPU)
4 channels, 12000 values total in 17 wallclock secs (15.64 usr +  0.27 sys = 15.91 CPU)
4 channels, 14000 values total in 20 wallclock secs (18.15 usr +  0.35 sys = 18.50 CPU)
4 channels, 16000 values total in 23 wallclock secs (20.89 usr +  0.38 sys = 21.27 CPU)

Same, but on office PC with server on the same computer (no network)
4 channels,    40 values total in  0 wallclock secs ( 0.15 usr +  0.00 sys =  0.15 CPU)
4 channels,   400 values total in  1 wallclock secs ( 0.64 usr +  0.00 sys =  0.64 CPU)
4 channels,   800 values total in  2 wallclock secs ( 1.14 usr +  0.02 sys =  1.16 CPU)
4 channels,  1600 values total in  2 wallclock secs ( 2.19 usr +  0.00 sys =  2.19 CPU)
4 channels,  2000 values total in  3 wallclock secs ( 2.70 usr +  0.04 sys =  2.74 CPU)
4 channels,  4000 values total in  6 wallclock secs ( 5.26 usr +  0.10 sys =  5.36 CPU)
4 channels,  8000 values total in 11 wallclock secs (10.33 usr +  0.15 sys = 10.48 CPU)
4 channels, 10000 values total in 14 wallclock secs (12.95 usr +  0.19 sys = 13.14 CPU)
4 channels, 12000 values total in 17 wallclock secs (15.51 usr +  0.19 sys = 15.70 CPU)
4 channels, 14000 values total in 21 wallclock secs (17.96 usr +  0.20 sys = 18.16 CPU)
4 channels, 16000 values total in 23 wallclock secs (21.27 usr +  0.25 sys = 21.52 CPU)

Comparison:
I instrumented the server (the CGI tool) to print its
runtime, measured at start & stop of the main() routine.
Those times are tiny compared to the above:

get_values(4 channels, each 10 values = 40 values) ran 0.00993 seconds
get_values(4 channels, each 100 values = 400 values) ran 0.030336 seconds
get_values(4 channels, each 200 values = 800 values) ran 0.064259 seconds
get_values(4 channels, each 400 values = 1600 values) ran 0.134112 seconds
get_values(4 channels, each 500 values = 2000 values) ran 0.165618 seconds
get_values(4 channels, each 1000 values = 4000 values) ran 0.343979 seconds
get_values(4 channels, each 2000 values = 8000 values) ran 0.675459 seconds
get_values(4 channels, each 2500 values = 10000 values) ran 0.843693 seconds
get_values(4 channels, each 3000 values = 12000 values) ran 1.01765 seconds
get_values(4 channels, each 3500 values = 14000 values) ran 1.18937 seconds
get_values(4 channels, each 4000 values = 16000 values) ran 1.33184 seconds


Tried again with a C client (using xmlrpc-c-0.9.9).
When the client printed everything, redirected to a file,
these are the times:

Total of 40 values
real    0m0.183s
user    0m0.080s
sys     0m0.010s

Total of 400 values
real    0m0.311s
user    0m0.160s
sys     0m0.010s

Total of 800 values
real    0m0.510s
user    0m0.300s
sys     0m0.010s

Total of 1600 values
real    0m0.753s
user    0m0.450s
sys     0m0.050s

Total of 2000 values
real    0m0.886s
user    0m0.530s
sys     0m0.060s

Total of 4000 values
real    0m1.670s
user    0m1.010s
sys     0m0.040s

Total of 8000 values
real    0m3.278s
user    0m1.800s
sys     0m0.220s

Total of 10000 values
real    0m4.063s
user    0m2.380s
sys     0m0.180s

Total of 12000 values
real    0m4.750s
user    0m2.790s
sys     0m0.240s

Total of 14000 values
real    0m5.564s
user    0m3.240s
sys     0m0.310s

Total of 16000 values
real    0m6.280s
user    0m3.650s
sys     0m0.380s                    